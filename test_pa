import sys
import os
import tkinter as tk
from tkinter import simpledialog, messagebox
import urllib.request
import subprocess

class MenuGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Menu")
        self.root.geometry("900x900")

        self.menu_label = tk.Label(self.root, text="Select from the menu:")
        self.menu_label.pack()

        self.menu_options = tk.Listbox(self.root)
        self.menu_options.insert(1, "test")
        self.menu_options.insert(11, "Other")
        self.menu_options.insert(12, "Exit")
    
        self.menu_options.pack()

        self.select_button = tk.Button(self.root, text="Select", command=self.handle_selection)
        self.select_button.pack()

    def handle_selection(self):
        selection = self.menu_options.curselection()
        if selection:
            choice = self.menu_options.get(selection)
            if choice == "test":
                self.info()
            elif choice == "Exit":
                sys.exit()

    def generate_report(self, category):
        # Dummy report generation, replace with actual report generation code
        report_filename = f"{category}_report.html"
        with open(report_filename, "w") as report_file:
            report_file.write(f"<html><head><title>{category} Report</title></head><body>")
            report_file.write(f"<h1>{category} Report</h1>")
            report_file.write("<p>This is a dummy report. Replace it with actual content.</p>")
            report_file.write("</body></html>")
        messagebox.showinfo("Report Generated", f"HTML report for {category} has been generated: {report_filename}")

    def info(self):
        pass  # You can implement your information gathering function here

    def passwd(self):
        pass  # Implement your password attacks function here

    def wire(self):
        pass  # Implement your wireless testing function here

    def exp(self):
        pass  # Implement your exploitation tools function here

    def snif(self):
        pass  # Implement your sniffing & spoofing function here

    def webhack(self):
        pass  # Implement your web hacking function here

    def tnn(self):
        pass  # Implement your private tools function here

    def postexp(self):
        pass  # Implement your post exploitation function here

    def sniper(self):
        pass  # Implement your recon function here

    def others(self):
        pass  # Implement your other function here

def clearScr():
    # Efface l'Ã©cran de la console
    subprocess.run('cls' if os.name == 'nt' else 'clear', shell=True)

def scanusers():
    site = input('Enter a website : ')
    try:
        users = site
        if 'http://www.' in users:
            users = users.replace('http://www.', '')
        if 'http://' in users:
            users = users.replace('http://', '')
        if '.' in users:
            users = users.replace('.', '')
        if '-' in users:
            users = users.replace('-', '')
        if '/' in users:
            users = users.replace('/', '')
        while len(users) > 2:
            print(users)
            resp = urllib.request.urlopen(site + '/cgi-sys/guestbook.cgi?user=%s' % users).read()
            # You can also use a regular expression
            if 'invalid username' not in resp.lower():
                print("\tFound -> %s" % users)
                pass

            users = users[:-1]
    except Exception as e:
        print(e)

def wpue():
    subprocess.run(["git", "clone", "https://github.com/wpscanteam/wpscan.git"], check=True)
    clearScr()
    xe=input("Select a Wordpress target : ")
    subprocess.run(["ruby", "wpscan.rb", "--url", xe, "--enumerate", "u"], cwd="wpscan", check=True)

def doork():
    print("doork is an open-source passive vulnerability auditor tool that automates the process of searching on Google information about specific website based on dorks.")
    doorkchice = input("Continue Y / N: ")
    if doorkchice in ['Y','y']:
        subprocess.run(["pip", "install", "beautifulsoup4", "requests"], check=True)
        subprocess.run(["git", "clone", "https://github.com/AeonDave/doork"], check=True)
        clearScr()
        doorkt = input("Target : ")
        subprocess.run(["python", "doork.py", "-t", doorkt, "-o", "log.log"], cwd="doork", check=True)

def xsstracer():
    clearScr()  
    print("XSSTracer is a small python script that checks remote web servers for Clickjacking, Cross-Frame Scripting, Cross-Site Tracing and Host Header Injection.")
    subprocess.run(["git", "clone", "https://github.com/1N3/XSSTracer.git"], check=True)
    clearScr()  
    xsstracerchoice = input("Select a Target: ")  
    subprocess.run(["python", "xsstracer.py", xsstracerchoice, "80"], cwd="XSSTracer", check=True)

root = tk.Tk()
menu_gui = MenuGUI(root)
root.mainloop()