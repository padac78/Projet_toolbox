import sys
import os
import tkinter as tk
from tkinter import simpledialog, messagebox
import urllib.request

class MenuGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Menu")
        self.root.geometry("300x200")

        self.menu_label = tk.Label(self.root, text="Select from the menu:")
        self.menu_label.pack()

        self.menu_options = tk.Listbox(self.root)
        self.menu_options.insert(1, "Information Gathering")
        self.menu_options.insert(2, "XSS Tracer")
        self.menu_options.insert(3, "testt")        
        self.menu_options.insert(4, "testsstt")
        self.menu_options.insert(5, "tesssstte")        
        self.menu_options.insert(6, "Wordpress")
        self.menu_options.insert(7, "Generate Report")  # New option
        self.menu_options.insert(8, "Exit")
    
        self.menu_options.pack()

        self.select_button = tk.Button(self.root, text="Select", command=self.handle_selection)
        self.select_button.pack()

    def handle_selection(self):
        selection = self.menu_options.curselection()
        if selection:
            choice = self.menu_options.get(selection)
            if choice == "Information Gathering":
                self.info()
            elif choice == "XSS Tracer":
                self.xsstracer_function()
            elif choice == "testt":
                self.testt_function()
            elif choice == "testsstt":
                self.testsstt_function()
            elif choice == "tesssstte":
                self.tesssstte_function()
            elif choice == "Wordpress":
                self.wpue()
            elif choice == "Generate Report":  # Handle report generation
                self.generate_report_dialog()
            elif choice == "Exit":
                sys.exit()

    def generate_report_dialog(self):
        category = simpledialog.askstring("Generate Report", "Enter report category:")
        if category:
            self.generate_report(category)

    def generate_report(self, category):
        # Dummy report generation, replace with actual report generation code
        report_filename = f"{category}_report.html"
        with open(report_filename, "w") as report_file:
            report_file.write(f"<html><head><title>{category} Report</title></head><body>")
            report_file.write(f"<h1>{category} Report</h1>")
            report_file.write("<p>This is a dummy report. Replace it with actual content.</p>")
            report_file.write("</body></html>")
        messagebox.showinfo("Report Generated", f"HTML report for {category} has been generated: {report_filename}")

    def info(self):
        # Placeholder for Information Gathering functionality
        messagebox.showinfo("Information Gathering", "Information Gathering feature will be implemented soon.")

    def tesssst_function(self):
        # Placeholder for tesssst functionality
        messagebox.showinfo("tesssst", "tesssst feature will be implemented soon.")

    def testt_function(self):
        # Placeholder for testt functionality
        messagebox.showinfo("testt", "testt feature will be implemented soon.")

    def testsstt_function(self):
        # Placeholder for testsstt functionality
        messagebox.showinfo("testsstt", "testsstt feature will be implemented soon.")

    def tesssstte_function(self):
        # Placeholder for tesssstte functionality
        messagebox.showinfo("tesssstte", "tesssstte feature will be implemented soon.")

    def wpue():
        os.system("git clone https://github.com/wpscanteam/wpscan.git")
        xe=input("Select a Wordpress target : ")
        os.system("cd wpscan && sudo ruby wpscan.rb --url %s --enumerate u"%xe)

        
    def xsstracer_function(self):
        self.clearScr()  
        print("XSSTracer is a small python script that checks remote web servers for Clickjacking, Cross-Frame Scripting, Cross-Site Tracing and Host Header Injection.")
        os.system("git clone https://github.com/padac78/XSSTracer")
        self.clearScr()  
        xsstracerchoice = input("Select a Target: ")  
        os.system("cd XSSTracer && chmod 777 xsstracer.py && python xsstracer.py %s 80" % xsstracerchoice)

    def clearScr(self):
        # Clears the console screen
        os.system('cls' if os.name == 'nt' else 'clear')

root = tk.Tk()
menu_gui = MenuGUI(root)
root.mainloop()
