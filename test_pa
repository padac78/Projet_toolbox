import tkinter as tk
import tkinter.ttk as ttk
import threading
from tkinter import simpledialog, messagebox
import subprocess
import requests
import urllib.error
from urllib.request import urlopen
from bs4 import BeautifulSoup
import re
from fpdf import FPDF
import nmap


def create_pdf_report(data, filename, title):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, txt=title, align="C")
    pdf.ln(10)
    for key, value in data.items():
        if not isinstance(value, str):
            value = str(value)
        pdf.multi_cell(0, 10, txt=f"{key}: {value}".encode('latin-1', 'replace').decode('latin-1'))  # Encode and decode with 'latin-1' codec
    pdf.output(filename)


def append_text_to_pdf(data, filename):
    with open(filename, 'ab') as file:  # Open the existing PDF file in append mode
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()

        # Add the new text
        for key, value in data.items():
            if not isinstance(value, str):
                value = str(value)
            value = value.encode('latin-1', 'replace').decode('latin-1')
            key = key.encode('latin-1', 'replace').decode('latin-1')
            pdf.cell(200, 10, txt=f"{key}: {value}", ln=True)

        pdf.output(file)


class MenuGUI:

    def __init__(self, root, serverip):
        self.root = root
        self.serverip = serverip
        self.root.title("Menu")
        self.root.geometry("400x400")

        self.menu_label = tk.Label(self.root, text="Sélectionnez une option : ")
        self.menu_label.pack()

        self.menu_options = tk.Listbox(self.root)
        options = [
            "XSS Tracer",
            "Wordpress",
            "SQL-injection",
            "Sites",
            "Nmap",
            "Check CVE",
            "Generate Report",
            "Exit"
        ]
        for option in options:
            self.menu_options.insert(tk.END, option)
        self.menu_options.pack()
        self.report_data = {}

        self.entry = tk.Entry(self.root)
        self.entry.pack()

        self.select_button = tk.Button(self.root, text="Select", command=self.handle_selection)
        self.select_button.pack()

        self.text = tk.Text(self.root, height=10, width=50)
        self.text.pack()

    def handle_selection(self):
        selected_option = self.menu_options.get(self.menu_options.curselection())
        if selected_option == "XSS Tracer":
            self.report_data["XSS Tracer"] = self.perform_xss_attack()
        elif selected_option == "Wordpress":
            self.report_data["Wordpress"] = self.wpscan_scan()
        elif selected_option == "SQL-injection":
            self.report_data["SQL-injection"] = self.sqlmap_attack()
        elif selected_option == "Sites":
            self.report_data["Sites"] = self.getSites()
        elif selected_option == "Check CVE":
            self.report_data["Check CVE"] = self.search_cve()
        elif selected_option == "Nmap":
            self.report_data["Nmap"] = self.nmap_scan()
        elif selected_option == "Generate Report":
            self.generate_report("Scan de sécurité -- Confidentiel")
        elif selected_option == "Exit":
            self.root.quit()

    def generate_report(self, category):
        report_filename = f"{category}_report.pdf"
        messagebox.showinfo("Report Generated", f"PDF report for {category} is being generated: {report_filename}")

        # Generate PDF report
        try:
            create_pdf_report(self.report_data, report_filename, category)  # Pass the report_data to the function
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while generating PDF report: {str(e)}")

    def nmap_scan(self):
        target = simpledialog.askstring("Nmap", "Enter the target IP or hostname:")
        if target:
            output_window = tk.Toplevel(self.root)
            output_window.title("Nmap Scan Output")
            output_text = tk.Text(output_window)
            output_text.pack(fill=tk.BOTH, expand=True)

            progress = ttk.Progressbar(output_window, length=200, mode='indeterminate')
            progress.pack()

            def scan():
                nm = nmap.PortScanner()
                nm.scan(hosts=target, arguments='-p 1-1024')
                scan_result = nm

                for host in scan_result.all_hosts():
                    output_text.insert(tk.END, f"Host: {host}\n")
                    for proto in scan_result[host].all_protocols():
                        output_text.insert(tk.END, f"Protocol: {proto}\n")
                        ports = scan_result[host][proto].keys()
                        for port in ports:
                            state = scan_result[host][proto][port]['state']
                            service = scan_result[host][proto][port]['name']
                            output_text.insert(tk.END, f"Port: {port} - State: {state} - Service: {service}\n")

                progress.stop()
                return scan_result

            threading.Thread(target=scan).start()
            progress.start(10)

    def search_cve(self):
        cve_id = simpledialog.askstring("CVE", "Entrez l'ID de la CVE:")
        if cve_id:
            url = f"https://nvd.nist.gov/vuln/detail/{cve_id}"
            try:
                response = requests.get(url)
                soup = BeautifulSoup(response.text, 'html.parser')
                cve_detail_element = soup.find('p', attrs={'data-testid': 'vuln-description'})
                if cve_detail_element is not None:
                    cve_detail = cve_detail_element.text.strip()
                    self.report_data["Check CVE"] = f"{cve_id}: {cve_detail}"  # Add CVE detail to report_data
                    self.text.insert(tk.END, f"CVE Detail for {cve_id}:\n")
                    self.text.insert(tk.END, f"{cve_detail}\n")
                    return f"{cve_id}: {cve_detail}"  # Return the added CVE detail
                else:
                    self.text.insert(tk.END, f"No detail found for CVE: {cve_id}\n")
            except Exception as e:
                self.text.insert(tk.END, f"An error occurred while checking CVE: {str(e)}\n")
        return None  # Return None if no CVE detail is added

    def perform_xss_attack(self):
        url = simpledialog.askstring("XSS Tracer", "Enter the URL to perform XSS attack on:")
        if url:
            print(f"URL: {url}")  # Print the URL
            payload = "<img src=x onerror=alert('XSS Attack!')>"
            form_data = {"input_field": payload}
            try:
                response = requests.post(url, data=form_data)
                print(f"Response status code: {response.status_code}")  # Print the response status code
                print(f"Response headers: {response.headers}")  # Print the response headers
                print(f"Response text: {response.text}")  # Print the response text
                if payload in response.text:
                    show_alert = messagebox.askyesno("XSS Vulnerability Detected", "The site may be vulnerable to XSS attacks! Do you want to display this message?")
                    if show_alert:
                        return "The site may be vulnerable to XSS attacks!"
                    else:
                        return "The site may be vulnerable to XSS attacks! (Alert not displayed)"
                else:
                    return "The site is not vulnerable to XSS attacks."
            except requests.exceptions.RequestException as e:
                print(f"RequestException: {e}")  # Print the exception
                return f"An error occurred: {e}"
        else:
            print("No URL provided.")  # Print if no URL is provided
        return "No URL provided."


    def wpscan_scan(self):
        site_url = simpledialog.askstring("Wordpress", "Entre l'URL du site à scanner:")
        if site_url:
            try:
                result = subprocess.run(["wpscan", "--url", site_url, "--enumerate", "u", "--ignore-main-redirect"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, check=True)
                output_window = tk.Toplevel(self.root)
                output_window.title("WPScan Output")
                output_text = tk.Text(output_window)
                output_text.insert(tk.END, result.stdout)
                output_text.pack(fill=tk.BOTH, expand=True)
                return result.stdout
            except (FileNotFoundError, subprocess.CalledProcessError) as e:
                return str(e)

    def sqlmap_attack(self):
        url = simpledialog.askstring("SQLMap", "Enter the URL to perform SQLMap attack on:")
        if url:
            try:
                result = subprocess.run(["sqlmap", "-u", url, "--dbs"], capture_output=True, text=True)
                return result.stdout
            except FileNotFoundError:
                return "SQLMap n'a pas été trouvé sur le système. Assurez-vous qu'il est installé et accessible dans votre chemin d'exécution."
        return "No URL provided."

    def getSites(self):
        lista = []
        page = 1
        while page <= 101:
            try:
                bing = f"http://www.bing.com/search?q=ip%3A{self.serverip}+&count=50&first={page}"
                openbing = urlopen(bing)
                soup = BeautifulSoup(openbing, 'html.parser')
                findwebs = [h2.a['href'] for h2 in soup.find_all('h2')]
                for i in range(len(findwebs)):
                    allnoclean = findwebs[i]
                    findall1 = re.findall('http://(.*?)/', allnoclean)
                    for idx, item in enumerate(findall1):
                        if 'www' not in item:
                            findall1[idx] = 'http://www.' + item + '/'
                        else:
                            findall1[idx] = 'http://' + item + '/'
                    lista.extend(findall1)
                page += 50
            except urllib.error.URLError:
                pass
        self.sites = list(set(lista))
        print('\033c')
        return self.sites


# Main execution code
if __name__ == "__main__":
    root = tk.Tk()
    app = MenuGUI(root, serverip="127.0.0.1")  # Replace with the actual server IP if needed
    root.mainloop()
