import tkinter as tk
import tkinter.ttk as ttk
from tkinter import simpledialog, messagebox
import threading
import subprocess
import requests
from urllib.request import urlopen
from bs4 import BeautifulSoup
import re
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib import colors
from reportlab.lib.units import inch
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, PageBreak
import nmap


def create_pdf_report(data, filename, title):
    doc = SimpleDocTemplate(filename, pagesize=letter)
    elements = []
    styles = getSampleStyleSheet()
    title_paragraph = Paragraph(title, styles["Title"])
    elements.append(title_paragraph)
    elements.append(PageBreak())

    for key, value in data.items():
        section_title = Paragraph(key, styles['Heading2'])
        elements.append(section_title)

        table_data = []
        lines = value.split('\n')
        max_lines_per_cell = 20
        split_content = [lines[i:i + max_lines_per_cell] for i in range(0, len(lines), max_lines_per_cell)]
        for part in split_content:
            table_data.append([Paragraph("<br/>".join(part), styles['BodyText'])])

        table = Table(table_data, colWidths=[7.5 * inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))

        elements.append(table)
        elements.append(PageBreak())

    try:
        doc.build(elements)
    except Exception as e:
        print(f"An error occurred while generating PDF report: {e}")


class MenuGUI:
    def __init__(self, root, serverip):
        self.root = root
        self.serverip = serverip
        self.root.title("Menu")
        self.root.geometry("400x400")

        self.menu_label = tk.Label(self.root, text="Sélectionnez une option : ")
        self.menu_label.pack()

        self.menu_options = tk.Listbox(self.root)
        options = [
            "XSS Tracer", "Wordpress", "SQL-injection", "Sites",
            "Nmap", "Check CVE", "Rapidscan", "Generate Report", "Exit"
        ]
        for option in options:
            self.menu_options.insert(tk.END, option)
        self.menu_options.pack()

        self.report_data = {}
        self.entry = tk.Entry(self.root)
        self.entry.pack()

        self.select_button = tk.Button(self.root, text="Select", command=self.handle_selection)
        self.select_button.pack()

        self.text = tk.Text(self.root, height=10, width=50)
        self.text.pack()

    def handle_selection(self):
        selected_option = self.menu_options.get(self.menu_options.curselection())
        if selected_option == "XSS Tracer":
            self.report_data["XSS Tracer"] = self.perform_xss_attack()
        elif selected_option == "Wordpress":
            self.report_data["Wordpress"] = self.wpscan_scan()
        elif selected_option == "SQL-injection":
            self.report_data["SQL-injection"] = self.sqlmap_attack()
        elif selected_option == "Sites":
            self.report_data["Sites"] = self.getSites()
        elif selected_option == "Check CVE":
            self.report_data["Check CVE"] = self.search_cve()
        elif selected_option == "Nmap":
            self.report_data["Nmap"] = self.nmap_scan()
        elif selected_option == "Rapidscan":
            self.report_data["Rapidscan"] = self.rapidscan_scan()
        elif selected_option == "Generate Report":
            self.generate_report("Scan de sécurité -- Confidentiel")
        elif selected_option == "Exit":
            self.root.quit()

    def generate_report(self, category):
        report_filename = f"{category}_report.pdf"
        messagebox.showinfo("Report Generated", f"PDF report for {category} is being generated: {report_filename}")
        try:
            create_pdf_report(self.report_data, report_filename, category)
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while generating PDF report: {str(e)}")

    def rapidscan_scan(self):
        target = simpledialog.askstring("Rapidscan", "Enter the target URL or IP:")
        if target:
            output_window = tk.Toplevel(self.root)
            output_window.title("Rapidscan Output")
            output_text = tk.Text(output_window)
            output_text.pack(fill=tk.BOTH, expand=True)

            progress = ttk.Progressbar(output_window, length=200, mode='indeterminate')
            progress.pack()

            def scan():
                try:
                    result = subprocess.run(['python3', 'rapidscan.py', target], cwd="path_to_rapidscan_directory", stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    output_text.insert(tk.END, result.stdout)
                    self.report_data["Rapidscan"] = result.stdout
                    progress.stop()
                except Exception as e:
                    output_text.insert(tk.END, f"An error occurred: {e}")
                    progress.stop()

            threading.Thread(target=scan).start()
            progress.start(10)

    # Add the rest of your functions here, such as nmap_scan, wpscan_scan, sqlmap_attack, etc.
    # Example for nmap_scan:
    def nmap_scan(self):
        target = simpledialog.askstring("Nmap", "Enter the target IP or hostname:")
        if target:
            output_window = tk.Toplevel(self.root)
            output_window.title("Nmap Scan Output")
            output_text = tk.Text(output_window)
            output_text.pack(fill=tk.BOTH, expand=True)

            progress = ttk.Progressbar(output_window, length=200, mode='indeterminate')
            progress.pack()

            def scan():
                nm = nmap.PortScanner()
                nm.scan(hosts=target, arguments='-p 1-1024')
                scan_result = ""

                for host in nm.all_hosts():
                    scan_result += f"Host: {host}\n"
                    for proto in nm[host].all_protocols():
                        scan_result += f"Protocol: {proto}\n"
                        ports = nm[host][proto].keys()
                        for port in ports:
                            state = nm[host][proto][port]['state']
                            service = nm[host][proto][port]['name']
                            scan_result += f"Port: {port} - State: {state} - Service: {service}\n"

                output_text.insert(tk.END, scan_result)
                progress.stop()
                self.report_data["Nmap"] = scan_result

            threading.Thread(target=scan).start()
            progress.start(10)

if __name__ == "__main__":
    root = tk.Tk()
    serverip = "192.168.1.1"  # Replace with actual server IP
    app = MenuGUI(root, serverip)
    root.mainloop()
