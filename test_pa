import tkinter as tk
from tkinter import simpledialog, messagebox
import subprocess
import os

class MenuGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Menu")
        self.root.geometry("300x300")

        self.menu_label = tk.Label(self.root, text="Select from the menu:")
        self.menu_label.pack()

        self.menu_options = tk.Listbox(self.root)
        options = [
            "Information Gathering",
            "XSS Tracer",
            "Wordpress",
            "SQL-injection",
            "tesssstte",
            "Wordpress",
            "Generate Report",
            "Exit"
        ]
        for option in options:
            self.menu_options.insert(tk.END, option)
        self.menu_options.pack()

        self.select_button = tk.Button(self.root, text="Select", command=self.handle_selection)
        self.select_button.pack()

    def handle_selection(self):
        selection = self.menu_options.curselection()
        if selection:
            choice = self.menu_options.get(selection)
            if choice == "Information Gathering":
                self.info()
            elif choice == "XSS Tracer":
                self.xsstracer_function()
            elif choice == "Wordpress":
                self.wpue()
            elif choice == "SQL-injection":
                self.sqlmap()
            elif choice == "tesssstte":
                self.tesssstte_function()
            elif choice == "Generate Report":
                self.generate_report_dialog()
            elif choice == "Exit":
                self.root.destroy()

    def generate_report_dialog(self):
        category = simpledialog.askstring("Generate Report", "Enter report category:")
        if category:
            self.generate_report(category)

    def generate_report(self, category):
        report_filename = f"{category}_report.html"
        with open(report_filename, "w") as report_file:
            report_file.write(f"<html><head><title>{category} Report</title></head><body>")
            report_file.write(f"<h1>{category} Report</h1>")
            report_file.write("<p>This is a dummy report. Replace it with actual content.</p>")
            report_file.write("</body></html>")
        messagebox.showinfo("Report Generated", f"HTML report for {category} has been generated: {report_filename}")

    def xsstracer_function(self):
        self.clearScr()
        print("XSSTracer is a small python script that checks remote web servers for Clickjacking, Cross-Frame Scripting, Cross-Site Tracing and Host Header Injection.")
        subprocess.run(["git", "clone", "https://github.com/padac78/XSSTracer"])
        self.clearScr()
        xsstracerchoice = input("Select a Target: ")
        subprocess.run(["python", "XSSTracer/xsstracer.py", xsstracerchoice, "80"])

    def wpue(self):
        subprocess.run(["git", "clone", "https://github.com/padac78/wpscan"])
        xe = input("Select a Wordpress target : ")
        subprocess.run(["ruby", "wpscan/wpscan.rb", "--url", xe, "--enumerate", "u"])
        result = subprocess.run(["git", "clone", "https://github.com/padac78/wpscan"], capture_output=True, text=True)
        if result.returncode != 0:
            print(f"Error cloning repository: {result.stderr}")

    def info(self):
        print("Info function not implemented yet.")

    def sqlmap(self):
        yes = ['Y', 'y', 'yes', 'Yes']
        no = ['N', 'n', 'no', 'No']

        print("usage : python sqlmap.py -h")
        choice8 = input("Continue: y/n :")
        if choice8 in yes:
            subprocess.run(["git", "clone", "https://github.com/padac78/sqlmap", "sqlmap-dev"])
        elif choice8 in no:
            subprocess.run(["clear"])
            self.info()
        elif choice8 == "":
            self.menu()
        else: 
            self.menu()

    def tesssstte_function(self):
        messagebox.showinfo("tesssstte", "tesssstte feature will be implemented soon.")

    def clearScr(self):
        subprocess.run("cls" if os.name == "nt" else "clear", shell=True)

    def menu(self):
        print("Menu function not implemented yet.")

root = tk.Tk()
menu_gui = MenuGUI(root)
root.mainloop()